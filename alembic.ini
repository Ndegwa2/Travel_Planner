# A generic, single database configuration.

[alembic]
# Path to migration scripts
script_location = migrations

# Template used to generate migration file names.
# Uncomment the line below if you want the files to be prepended with date and time
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# Prepend sys.path if present.
# Defaults to the current working directory.
prepend_sys_path = .

# Timezone to use when rendering the date within the migration file
# as well as the filename. Leave blank for localtime
# timezone =

# Max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# Set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# Set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# Version location specification
# version_locations = %(here)s/bar:%(here)s/bat:migrations/versions

# Version path separator; defaults to os.pathsep
version_path_separator = os

# Set to 'true' to search source files recursively
# in each "version_locations" directory
# recursive_version_locations = false

# Output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# Database URL
sqlalchemy.url = sqlite:///./travel_planner.db


[post_write_hooks]
# Post-write hooks define scripts or Python functions that are run
# on newly generated revision scripts.

# Example hook to format using "black"
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Example hook to lint with "ruff"
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Logging configuration
[loggers]
keys = root, sqlalchemy, alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
